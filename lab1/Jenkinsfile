pipeline {
  agent any

  options {
    skipDefaultCheckout()
  }

  environment {
    IMAGE_NAME           = "dramax8569/ci-cd-groovy-golang-docker"
    IMAGE_TAG            = "latest"
    DOCKER_CREDENTIALS_ID = "dockerhub-creds"
    GIT_CREDENTIALS_ID    = "github-creds"
  }

  stages {

    stage('Verificar Workspace') {
            steps {
                sh 'pwd'
                sh 'ls -la'
                sh 'git rev-parse --is-inside-work-tree || echo "NO es un repo Git"'
            }
        }

    stage('Checkout') {
      agent any
      steps {
        deleteDir()
        git url: 'https://github.com/dramax8569/CI-CD-groovy-golang-docker.git',
            branch: 'main',
            credentialsId: "${GIT_CREDENTIALS_ID}"
        sh 'ls -la'
      }
    }

    stage('Build & Test') {
      agent {
        docker {
          image 'golang:1.21'
          args  '-v /var/run/docker.sock:/var/run/docker.sock'
          reuseNode true
        }
      }
      steps {
        dir('lab1') {
          sh 'go version'
          sh 'go mod tidy'                // Add this line to resolve dependencies
          sh 'go build -o app'
          sh 'go test ./...'
        }
      }
    }


    stage('Docker Build & Push') {
      steps {
        dir('lab1') {
          sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
          withCredentials([usernamePassword(
            credentialsId: "${DOCKER_CREDENTIALS_ID}",
            usernameVariable: 'DOCKER_USER',
            passwordVariable: 'DOCKER_PASS'
          )]) {
            sh '''
              echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
              docker push ${IMAGE_NAME}:${IMAGE_TAG}
            '''
          }
        }
      }
    }

    stage('Deploy') {
      steps {
        script {
          def deployScript = '''
            #!/bin/bash
            docker pull ${IMAGE_NAME}:${IMAGE_TAG}
            docker run -d --name ci-cd-app -p 8080:8080 ${IMAGE_NAME}:${IMAGE_TAG}
          '''
          writeFile file: 'deploy.sh', text: deployScript
          sh 'chmod +x deploy.sh'
          sh './deploy.sh'
        }
      }
    }

  }

  post {
    success { echo "✅ Pipeline finalizado exitosamente." }
    failure { echo "❌ Algo falló en la ejecución del pipeline." }
  }
}
